$date
	Mon Oct 27 13:06:45 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module mac_tb_q3 $end
$var wire 16 ! out [15:0] $end
$var reg 16 " c [15:0] $end
$var reg 1 # clk $end
$var reg 16 $ expected_out [15:0] $end
$var integer 32 % i [31:0] $end
$var integer 32 & u [31:0] $end
$var integer 32 ' w_dec [31:0] $end
$var integer 32 ( w_file [31:0] $end
$var integer 32 ) w_scan_file [31:0] $end
$var integer 32 * x_dec [31:0] $end
$var integer 32 + x_file [31:0] $end
$var integer 32 , x_scan_file [31:0] $end
$scope function mac_predicted $end
$var reg 4 - a0 [3:0] $end
$var reg 4 . a1 [3:0] $end
$var reg 4 / a2 [3:0] $end
$var reg 4 0 a3 [3:0] $end
$var reg 4 1 b0 [3:0] $end
$var reg 4 2 b1 [3:0] $end
$var reg 4 3 b2 [3:0] $end
$var reg 4 4 b3 [3:0] $end
$var reg 16 5 mac_predicted [15:0] $end
$var reg 16 6 prev_sum [15:0] $end
$upscope $end
$scope function w_bin $end
$var reg 4 7 w_bin [3:0] $end
$var integer 32 8 weight [31:0] $end
$upscope $end
$scope function x_bin $end
$var reg 4 9 x_bin [3:0] $end
$var integer 32 : activation [31:0] $end
$upscope $end
$scope module mac_wrapper_instance $end
$var wire 4 ; a0 [3:0] $end
$var wire 4 < a1 [3:0] $end
$var wire 4 = a2 [3:0] $end
$var wire 4 > a3 [3:0] $end
$var wire 4 ? b0 [3:0] $end
$var wire 4 @ b1 [3:0] $end
$var wire 4 A b2 [3:0] $end
$var wire 4 B b3 [3:0] $end
$var wire 16 C c [15:0] $end
$var wire 1 # clk $end
$var wire 16 D out [15:0] $end
$var reg 4 E a0_q [3:0] $end
$var reg 4 F a1_q [3:0] $end
$var reg 4 G a2_q [3:0] $end
$var reg 4 H a3_q [3:0] $end
$var reg 4 I b0_q [3:0] $end
$var reg 4 J b1_q [3:0] $end
$var reg 4 K b2_q [3:0] $end
$var reg 4 L b3_q [3:0] $end
$var reg 16 M c_q [15:0] $end
$scope module mac_instance $end
$var wire 4 N a0 [3:0] $end
$var wire 4 O a1 [3:0] $end
$var wire 4 P a2 [3:0] $end
$var wire 4 Q a3 [3:0] $end
$var wire 4 R b0 [3:0] $end
$var wire 4 S b1 [3:0] $end
$var wire 4 T b2 [3:0] $end
$var wire 4 U b3 [3:0] $end
$var wire 16 V c [15:0] $end
$var wire 16 W out [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
b10000000000000000000000000000100 +
bx *
bx )
b10000000000000000000000000000011 (
bx '
bx &
bx %
b0 $
0#
bx "
bx !
$end
#2
1#
#3
b0 %
0#
#4
1#
#5
b1 %
b1111111111010000 $
b1111111111010000 5
b110 -
b111 .
b1 /
b11 0
b1 1
b1001 2
b111 3
b1100 4
b0 6
b0 "
b0 C
b1100 B
b11 >
b111 A
b1 =
b1001 @
b111 <
b1 ?
b1100 7
b0 8
b110 ;
b11 9
b11 :
b1 ,
b11 *
b1 )
b11111111111111111111111111111100 '
b100 &
0#
#6
b1111111111010000 !
b1111111111010000 D
b1111111111010000 W
b0 M
b0 V
b11 H
b11 Q
b1 G
b1 P
b111 F
b111 O
b110 E
b110 N
b1100 L
b1100 U
b111 K
b111 T
b1001 J
b1001 S
b1 I
b1 R
1#
#7
b10 %
b1111111110011110 $
b1111111110011110 5
b10 -
b10 .
b1111 /
b100 0
b1101 1
b1110 2
b1100 3
b101 4
b1111111111010000 6
b1111111111010000 "
b1111111111010000 C
b101 B
b100 >
b1100 A
b1111 =
b1110 @
b10 <
b1101 ?
b101 7
b1 8
b10 ;
b100 9
b100 :
b100 *
b101 '
b100 &
0#
#8
b1111111111010000 M
b1111111111010000 V
b100 H
b100 Q
b1111 G
b1111 P
b10 F
b10 O
b10 E
b10 N
b101 L
b101 U
b1100 K
b1100 T
b1110 J
b1110 S
b1111111110011110 !
b1111111110011110 D
b1111111110011110 W
b1101 I
b1101 R
1#
#9
b11 %
b1111111110000110 $
b1111111110000110 5
b110 -
b100 .
b0 /
b10 0
b1010 1
b100 2
b10 3
b1110 4
b1111111110011110 6
b1111111110011110 "
b1111111110011110 C
b1110 B
b10 >
b10 A
b0 =
b100 @
b100 <
b1010 ?
b1110 7
b0 8
b110 ;
b10 9
b10 :
b10 *
b11111111111111111111111111111110 '
b100 &
0#
#10
b1111111110011110 M
b1111111110011110 V
b10 H
b10 Q
b0 G
b0 P
b100 F
b100 O
b110 E
b110 N
b1110 L
b1110 U
b10 K
b10 T
b100 J
b100 S
b1111111110000110 !
b1111111110000110 D
b1111111110000110 W
b1010 I
b1010 R
1#
#11
b100 %
b1111111101011001 $
b1111111101011001 5
b1 -
b1010 .
b10 /
b1011 0
b0 1
b1100 2
b11 3
b1111 4
b1111111110000110 6
b1111111110000110 "
b1111111110000110 C
b1111 B
b1011 >
b11 A
b10 =
b1100 @
b1 8
b1010 <
b0 ?
b1111 7
b1 ;
b1011 9
b1011 :
b1011 *
b11111111111111111111111111111111 '
b100 &
0#
#12
b1111111110000110 M
b1111111110000110 V
b1011 H
b1011 Q
b10 G
b10 P
b1010 F
b1010 O
b1 E
b1 N
b1111 L
b1111 U
b11 K
b11 T
b1100 J
b1100 S
b1111111101011001 !
b1111111101011001 D
b1111111101011001 W
b0 I
b0 R
1#
#13
b101 %
b1111111101111111 $
b1111111101111111 5
b10 -
b110 .
b100 /
b1010 0
b1100 1
b101 2
b1010 3
b100 4
b1111111101011001 6
b1111111101011001 "
b1111111101011001 C
b100 B
b1010 >
b1010 A
b100 =
b101 @
b110 <
b1100 ?
b100 7
b0 8
b10 ;
b1010 9
b1010 :
b1010 *
b100 '
b100 &
0#
#14
b1111111101011001 M
b1111111101011001 V
b1010 H
b1010 Q
b100 G
b100 P
b110 F
b110 O
b10 E
b10 N
b100 L
b100 U
b1010 K
b1010 T
b101 J
b101 S
b1111111101111111 !
b1111111101111111 D
b1111111101111111 W
b1100 I
b1100 R
1#
#15
0#
#25
